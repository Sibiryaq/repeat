package praktikum.Core2.Collections.List;

public class ArrayListVsLinkendList {
    /**
     * узлы в LinkedList могут хранится в оперативной памяти хаотично
     * а массив внутри ArrayList последовательно
     * и в теории, есть шансы при добавлении большого количества элементов в ArrayList может закончится память
     * и новый список может не создатьтся и потеряются все данные


     Иногда LinkedList<T> может быть эффективнее, чем ArrayList<T>.
     Задачи, где нужно часто вставлять или удалять элементы из начала списка.
     Задачи с большим количеством вставок и удалений из середины списка.

     Рассмотрим для начала операцию по добавлению 1 млн элементов в начало списка.
     Для ArrayList<T> используется метод add(0, T), для LinkedList<T> метод addFirst(T). Результаты получились такими:
     ArrayList<T> — 66600 мс.
     LinkedList<T> — 870 мс.

     В случае с добавлением элемента в конец результаты получаются такими:
     ArrayList<T> — 650 мс.
     LinkedList<T> — 810 мс.
     */
}
